https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c
67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000

--------------------------------------------------
1  git config --global user.name "Kilon"  ------------------设置 用户名也就是提交人
2  git config --global user.email "331734234@qq.com" -------设置 邮箱  表示提交人的

以上是配置git的用户信息
--------------------------------------------------

3  创建git的版本库  设置一个空的版本库 在一个位置(尽量不要有中文) 创建一个空文件夹
4  git_repository -------------------------这里创建的是 :
5  cd D:\everyday\git_repository ----------进入到文件夹 :
6  pwd （git支持linux命令）----------------确认路径     :
7  git init  (使用 git init 初始化 版本库)-确认路径后   : 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
8  尽量用类似Notepad++工具编写文档 设置--首选项--新建 根据自己的系统选择编码要使用UTF-8无bom

   新建一个文档后放到 git 的数据仓内(上文新建的那个空文件夹下 或者其 子目录下workplace)。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9  添加文件到  git :  git add git使用.txt
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
10 提交 文件到 git (添加后是需要提交的 两步:添加 提交  注意:每次提交 都需要add)
   git commit -m "添加一个 git使用.txt 文件"  --------------提交文件 + 文件提交说明
   
   （可以一次添加多个文件，只提交一次
   $ git add file1.txt
   $ git add file2.txt file3.txt
   $ git commit -m "add 3 files."
   ）
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
11  使用 git log 查看提交版本日志
    $git log  或者
	$git log --pretty=oneline
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
12  在 git 中 用HEAD表示当前的版本，
    git reset --hard HEAD^ 回退到上一版本 
	git reset --hard HEAD~100 回退到之前100版本
	git reset --hard 版本号 可以到制定版本
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
13  git历史命令日志 git reflog  可以获得版本号
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
14  git add *  ------------------------添加当前文件夹下的所有文件
    git commit -m "提交文本说明"   ----提交
	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
15  git status  --查看当前文件未提交的状态。 这个文件是修改了还是新增的还是删除的等等
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
16  退出编辑器模式  先将大写开了。然后一直按着esc + 两下Z  就OK了
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
17  ”git diff HEAD -- git使用.txt “ -------------查看工作区和版本库里最新版本的区别
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
18 做了添加的 add 命令 可以进行撤销 
   添加的是啥东西，可以直接进行 add 取消操作
   git checkout -- git使用.txt
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
19 本地文件删除   git 也要做删除操作    
   git rm tjscwj.txt
   git commit -m "删除tjscwj文件"
   
   如果删除错了，那就没提交前 git checkout -- test.txt 取消(这个试验没成功，我都已经把文件删除了，还能恢复么？)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=   
20 第1步：创建SSH Key。在用户主目录下
   (C:\Users\Kilon\.ssh 可以在用户主目录里找到.ssh目录，
   里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
   id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。)，
   
   看看有没有.ssh目录，如果有，
   再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
   如果已经有了，可直接跳到下一步。如果没有，
   打开Shell（Windows下打开Git Bash），创建SSH Key：

   $ ssh-keygen -t rsa -C "331734234@qq.com"

   你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
   
   第2步：登陆GitHub，头像 --setting -- SSH and GPG keys -- NEW SSHKEY -- 输入 title --- 输入 上文生成的文件(id_rsa.pub)内的内容 到 key -- add ssh key
   
   (为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
    当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
    最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=   
21 使用远程仓库
    a. https://github.com/ 登录网站 找到 new  repositories  新建远程库
       创建后会提示，是否新建远程库内容，或者推送本地库，或者导入其他库配置 使用第二个，将本地库推送至远程库
       …or push an existing repository from the command line
       git remote add origin(远程仓库名) https://github.com/IamKilon/JavaStudy.git
       git push -u origin master

    b. 添加到远程库 添加名字为 yuanck
       Kilon@Kilon-PC MINGW64 /d/everyday/git_repository/workplace (master)
       $ git remote add yuanck https://github.com/IamKilon/JavaStudy.git

    c. 将本地分支推送至远程库 yuanck
       Kilon@Kilon-PC MINGW64 /d/everyday/git_repository/workplace (master)
       $ git push -u yuanck master
       Username for 'https://github.com': kilon  这里提示输入用户名  IKilon
       remote: Invalid username or password. 这里提示输入密码        aaa123456aa
       fatal: Authentication failed for 'https://github.com/IamKilon/JavaStudy.git/'  输入错了就这样
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
22  克隆远程库(一般是是远程库 也就是 git 网站上创建远程库，然后克隆到本地)
    在 git网站新建 项目 TESTYUANCKKL 创建后，点开项目，或者网站自动跳转。点击按钮 [Clone or download]
    cd 	/d/everyday/git_repository/workplace
	git clone git@github.com:IamKilon/TESTYUANCKKL.git
	
	这样就会将git网站内的项目内容 克隆到本机文件夹(workplace)下
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
23 创建 dev 分支 
   git checkout -b dev 
   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
   $ git branch dev
   $ git checkout dev
   Switched to branch 'dev'
   
   然后，用git branch命令查看当前分支
   $ git branch
   * dev
     master
   git branch命令会列出所有分支，当前分支前面会标一个*号。
   然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：
   Creating a new branch is quick.
   测试分支
   
   git branch //显示当前分支
   git checkout fenzhi //切换到分支
   git merge fenzhi //合并分支到master分支上
   git branch -d fenzhi //删除分支 fenzhi
   
   查看分支：git branch

   创建分支：git branch <name>

   切换分支：git checkout <name>

   创建+切换分支：git checkout -b <name>

   合并某分支到当前分支：git merge <name>

   删除分支：git branch -d <name>
   
   示例:
   git checkout -b fenzhi
   git branch 
   修改文件内容
   git add 文件
   git commit -m 提交测试
   git checkout master 切换回原分支
   查看文件(这时候是没修改状态)
   git merge fenzhi 合并分支到master 注意此时的使用分支为 master
   git branch -d fenzhi 删除fenzhi分支
   git branch 查看分支
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<<<<<<< HEAD
24 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
=======
24 修改新分支
>>>>>>> xinfenzhi
 $ git checkout -b xinfenzhi //创建新分支
 $ git add * //修改文件内容git 添加
 $ git commit -m 提交新分支内容
 $ git checkout master //切换回原分支
 $ git add * 修改文件内容进行添加
 $ git commit -m 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
 $ git merge xifenzhi //切换回新分支
 $ git branch //查看分支
   * master
     xinfenzhi
 $ git merge xinfenzhi//切换回新分支
 //修改文件
 $ git status //查看修改内容
 $ git add * //添加修改内容到git
 $ git commit -m 将冲突文件进行提交
 $ git log --graph --pretty=oneline --abbrev-commit  //用带参数的git log也可以看到分支的合并情况：
	*   38a26f6 (HEAD -> master) 将冲突文件进行提交
	|\
	| * f3c96df (xinfenzhi) 提交新分支内容
	* | 6aa8c21 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
	|/
	* 069b18e 分支创建和删除
	* c8cadbe 测试分支
	* e9bbb4f 测试fenzhi分支提交
	* b55f2b0 测试分支
	* 280a5cd (origin/master, origin/HEAD) 添加000git使用到项目。
	* 9d816a6 Initial commit
 $ git branch -d xinfenzhi 删除新分支
 $ git branch //查看分支
   * master
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
25 创建提交commit进行分支管理测试
   $ git checkout -b fzgl //创建一个干活的分支
   $ git add * //修改内容后添加git
   $ git commit -m 创建提交分支管理策略测试
 
   $ git checkout master //切换到发布分支
   $ git merge --no-ff -m "不使用fast forward模式" fzgl //合并干活分支的内容使用这种方式自带一个 干活分支的提交

   $ git log  查看日志

   分支策略
   在实际开发中，我们应该按照几个基本原则进行分支管理：
   首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
   那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
   你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
   
   合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
26 软件开发中,bug就像家常便饭一样。有了bug就需要修复,在Git中，由于分支是如此的强大，
   所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
   当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
   但是，等等，当前正在dev上进行的工作还没有提交：
   并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
   幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
   ====================================================================================
   ====================================================================================
   首先确定 git 内现在有两个分支，master(主分支"发布分支"),ganhuo01(子分支，干活分支，现在正在干活，而且没干完不能提交)
   这时候收到一个bug通知，需要修改 场景模拟:
   $ git checkout ganhuo01 // 切换到干活分支
   //修改文件
   $ git status//查看修改内容  列出修改内容
   $ git stash //创建当前干活"存储区"
   $ git status//查看修改内容  再次查询 显示为空，因为当前是在一个新的工作空间(存储区)
   $ git checkout master //切换到发布分支内，注意这次切换是为了在 发布分支 上在创建 分支
   $ git checkout -b tempfenzhi_bug_001 //创建修复bug001分支
   //修复bug这里我吧文件的两个逗号给改了。
   $ git add * 添加到git
   $ git commit -m "修复001bug" 提交git
   $ git checkout master //切回master 发布分支
   $ git merge --no-ff -m "合并bug分支到master分支上" tempfenzhi_bug_001 //合并bug分支到master
   $ git branch -d tempfenzhi_bug_001 删除bug分支
   $ git checkout ganhuo01 回到干活分支
   $ git status 查看干活分支修改状态 现在显示为clean 干净的。
   $ git stash list 显示存储区
   $ git stash apply stash@{0}  恢复到存储区
   $ git stash drop //这时候就可以将这个存储区删除了。
   在ganhuo01上可以继续干活了，干完活后合并干活分支上的内容到 master 
   $ git merge --no-ff -m "合并干活分支到mater发布程序分支上" ganhuo01
   坐等发布。
   ====================================================================================
   ====================================================================================
   
   修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
   当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
27 强行删除分支 -D
   没有被合并的分支 删除的时候会提示 为做合并无法删除 这时使用 强删 -D 大概是这个意思
   $git branch -D feature-vulcan
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
28 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，
   并且，远程仓库的默认名称是origin。要查看远程库的信息，用git remote 或 git remote -v 详细信息
   详细信息会显示推送地址，如果没有权限则不会显示地址
   $ git push origin master 推送本地分支 master 到远程 仓库 origin 
   $ git push origin qita 推送本地分支 qita 到远程 仓库 origin 
   
   ganhuo02 分支创建 ，需要现在github里创建该分支，然后用命令
   git pull 将远程变动抓下来。
   或者在创建之后再clone 然后使用命令 
   $ git checkout -b ganhuo02 origin/ganhuo02 进行本地分支创建
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   首先，可以试图用git push origin branch-name推送自己的修改；
   如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
   如果合并有冲突，则解决冲突，并在本地提交；
   没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
   如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
   这就是多人协作的工作模式，一旦熟悉了，就非常简单。

  1.查看远程库信息，使用git remote -v；
  2.本地新建的分支如果不推送到远程，对其他人就是不可见的；
  3.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  4.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  5.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  6.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
29 