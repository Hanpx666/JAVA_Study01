https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c
67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000

--------------------------------------------------
1  git config --global user.name "Kilon"  ------------------设置 用户名也就是提交人
2  git config --global user.email "331734234@qq.com" -------设置 邮箱  表示提交人的

以上是配置git的用户信息
--------------------------------------------------

3  创建git的版本库  设置一个空的版本库 在一个位置(尽量不要有中文) 创建一个空文件夹
4  git_repository -------------------------这里创建的是 :
5  cd D:\everyday\git_repository ----------进入到文件夹 :
6  pwd （git支持linux命令）----------------确认路径     :
7  git init  (使用 git init 初始化 版本库)-确认路径后   : 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
8  尽量用类似Notepad++工具编写文档 设置--首选项--新建 根据自己的系统选择编码要使用UTF-8无bom

   新建一个文档后放到 git 的数据仓内(上文新建的那个空文件夹下 或者其 子目录下workplace)。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9  添加文件到  git :  git add git使用.txt
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
10 提交 文件到 git (添加后是需要提交的 两步:添加 提交  注意:每次提交 都需要add)
   git commit -m "添加一个 git使用.txt 文件"  --------------提交文件 + 文件提交说明
   
   （可以一次添加多个文件，只提交一次
   $ git add file1.txt
   $ git add file2.txt file3.txt
   $ git commit -m "add 3 files."
   ）
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
11  使用 git log 查看提交版本日志
    $git log  或者
	$git log --pretty=oneline
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
12  在 git 中 用HEAD表示当前的版本，
    git reset --hard HEAD^ 回退到上一版本 
	git reset --hard HEAD~100 回退到之前100版本
	git reset --hard 版本号 可以到制定版本
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
13  git历史命令日志 git reflog  可以获得版本号
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
14  git add *  ------------------------添加当前文件夹下的所有文件
    git commit -m "提交文本说明"   ----提交
	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
15  git status  --查看当前文件未提交的状态。 这个文件是修改了还是新增的还是删除的等等
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
16  退出编辑器模式  先将大写开了。然后一直按着esc + 两下Z  就OK了
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
17  ”git diff HEAD -- git使用.txt “ -------------查看工作区和版本库里最新版本的区别
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
18 做了添加的 add 命令 可以进行撤销 
   添加的是啥东西，可以直接进行 add 取消操作
   git checkout -- git使用.txt
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
19 本地文件删除   git 也要做删除操作    
   git rm tjscwj.txt
   git commit -m "删除tjscwj文件"
   
   如果删除错了，那就没提交前 git checkout -- test.txt 取消(这个试验没成功，我都已经把文件删除了，还能恢复么？)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=   
20 第1步：创建SSH Key。在用户主目录下
   (C:\Users\Kilon\.ssh 可以在用户主目录里找到.ssh目录，
   里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
   id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。)，
   
   看看有没有.ssh目录，如果有，
   再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
   如果已经有了，可直接跳到下一步。如果没有，
   打开Shell（Windows下打开Git Bash），创建SSH Key：

   $ ssh-keygen -t rsa -C "331734234@qq.com"

   你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
   
   第2步：登陆GitHub，头像 --setting -- SSH and GPG keys -- NEW SSHKEY -- 输入 title --- 输入 上文生成的文件(id_rsa.pub)内的内容 到 key -- add ssh key
   
   (为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
    当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
    最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=   
21 使用远程仓库
    a. https://github.com/ 登录网站 找到 new  repositories  新建远程库
       创建后会提示，是否新建远程库内容，或者推送本地库，或者导入其他库配置 使用第二个，将本地库推送至远程库
       …or push an existing repository from the command line
       git remote add origin(远程仓库名) https://github.com/IamKilon/JavaStudy.git
       git push -u origin master

    b. 添加到远程库 添加名字为 yuanck
       Kilon@Kilon-PC MINGW64 /d/everyday/git_repository/workplace (master)
       $ git remote add yuanck https://github.com/IamKilon/JavaStudy.git

    c. 将本地分支推送至远程库 yuanck
       Kilon@Kilon-PC MINGW64 /d/everyday/git_repository/workplace (master)
       $ git push -u yuanck master
       Username for 'https://github.com': kilon  这里提示输入用户名  IKilon
       remote: Invalid username or password. 这里提示输入密码        aaa123456aa
       fatal: Authentication failed for 'https://github.com/IamKilon/JavaStudy.git/'  输入错了就这样
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
22  克隆远程库(一般是是远程库 也就是 git 网站上创建远程库，然后克隆到本地)
    在 git网站新建 项目 TESTYUANCKKL 创建后，点开项目，或者网站自动跳转。点击按钮 [Clone or download]
    cd 	/d/everyday/git_repository/workplace
	git clone git@github.com:IamKilon/TESTYUANCKKL.git
	
	这样就会将git网站内的项目内容 克隆到本机文件夹(workplace)下
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
23 创建 dev 分支 
   git checkout -b dev 
   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
   $ git branch dev
   $ git checkout dev
   Switched to branch 'dev'
   
   然后，用git branch命令查看当前分支
   $ git branch
   * dev
     master
   git branch命令会列出所有分支，当前分支前面会标一个*号。
   然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：
   Creating a new branch is quick.
   测试分支
   
   git branch //显示当前分支
   git checkout fenzhi //切换到分支
   git merge fenzhi //合并分支到master分支上
   git branch -d fenzhi //删除分支 fenzhi
   
   查看分支：git branch

   创建分支：git branch <name>

   切换分支：git checkout <name>

   创建+切换分支：git checkout -b <name>

   合并某分支到当前分支：git merge <name>

   删除分支：git branch -d <name>
   
   示例:
   git checkout -b fenzhi
   git branch 
   修改文件内容
   git add 文件
   git commit -m 提交测试
   git checkout master 切换回原分支
   查看文件(这时候是没修改状态)
   git merge fenzhi 合并分支到master 注意此时的使用分支为 master
   git branch -d fenzhi 删除fenzhi分支
   git branch 查看分支
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<<<<<<< HEAD
24 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
=======
24 修改新分支
>>>>>>> xinfenzhi
 $ git checkout -b xinfenzhi //创建新分支
 $ git add * //修改文件内容git 添加
 $ git commit -m 提交新分支内容
 $ git checkout master //切换回原分支
 $ git add * 修改文件内容进行添加
 $ git commit -m 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
 $ git merge xifenzhi //切换回新分支
 $ git branch //查看分支
   * master
     xinfenzhi
 $ git merge xinfenzhi//切换回新分支
 //修改文件
 $ git status //查看修改内容
 $ git add * //添加修改内容到git
 $ git commit -m 将冲突文件进行提交
 $ git log --graph --pretty=oneline --abbrev-commit  //用带参数的git log也可以看到分支的合并情况：
	*   38a26f6 (HEAD -> master) 将冲突文件进行提交
	|\
	| * f3c96df (xinfenzhi) 提交新分支内容
	* | 6aa8c21 新建分支之后切换回原来分支。又做修改。这样就会产生冲突
	|/
	* 069b18e 分支创建和删除
	* c8cadbe 测试分支
	* e9bbb4f 测试fenzhi分支提交
	* b55f2b0 测试分支
	* 280a5cd (origin/master, origin/HEAD) 添加000git使用到项目。
	* 9d816a6 Initial commit
 $ git branch -d xinfenzhi 删除新分支
 $ git branch //查看分支
   * master
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
25 创建提交commit进行分支管理测试
   $ git checkout -b fzgl //创建一个干活的分支
   $ git add * //修改内容后添加git
   $ git commit -m 创建提交分支管理策略测试
 
   $ git checkout master //切换到发布分支
   $ git merge --no-ff -m "不使用fast forward模式" fzgl //合并干活分支的内容使用这种方式自带一个 干活分支的提交

   $ git log  查看日志

   分支策略
   在实际开发中，我们应该按照几个基本原则进行分支管理：
   首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
   那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
   你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
   
   合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
26 软件开发中,bug就像家常便饭一样。有了bug就需要修复,在Git中，由于分支是如此的强大，
   所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
   当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
   但是，等等，当前正在dev上进行的工作还没有提交：
   并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
   幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
   ====================================================================================
   ====================================================================================
   首先确定 git 内现在有两个分支，master(主分支"发布分支"),ganhuo01(子分支，干活分支，现在正在干活，而且没干完不能提交)
   这时候收到一个bug通知，需要修改 场景模拟:
   $ git checkout ganhuo01 // 切换到干活分支
   //修改文件
   $ git status//查看修改内容  列出修改内容
   $ git stash //创建当前干活"存储区"
   $ git status//查看修改内容  再次查询 显示为空，因为当前是在一个新的工作空间(存储区)
   $ git checkout master //切换到发布分支内，注意这次切换是为了在 发布分支 上在创建 分支
   $ git checkout -b tempfenzhi_bug_001 //创建修复bug001分支
   //修复bug这里我吧文件的两个逗号给改了。
   $ git add * 添加到git
   $ git commit -m "修复001bug" 提交git
   $ git checkout master //切回master 发布分支
   $ git merge --no-ff -m "合并bug分支到master分支上" tempfenzhi_bug_001 //合并bug分支到master
   $ git branch -d tempfenzhi_bug_001 删除bug分支
   $ git checkout ganhuo01 回到干活分支
   $ git status 查看干活分支修改状态 现在显示为clean 干净的。
   $ git stash list 显示存储区
   $ git stash apply stash@{0}  恢复到存储区
   $ git stash drop //这时候就可以将这个存储区删除了。
   在ganhuo01上可以继续干活了，干完活后合并干活分支上的内容到 master 
   $ git merge --no-ff -m "合并干活分支到mater发布程序分支上" ganhuo01
   坐等发布。
   ====================================================================================
   ====================================================================================
   
   修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
   当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
27 强行删除分支 -D
   没有被合并的分支 删除的时候会提示 为做合并无法删除 这时使用 强删 -D 大概是这个意思
   $git branch -D feature-vulcan
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
28 当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，
   并且，远程仓库的默认名称是origin。要查看远程库的信息，用git remote 或 git remote -v 详细信息
   详细信息会显示推送地址，如果没有权限则不会显示地址
   $ git push origin master 推送本地分支 master 到远程 仓库 origin 
   $ git push origin qita 推送本地分支 qita 到远程 仓库 origin 
   
   ganhuo02 分支创建 ，需要现在github里创建该分支，然后用命令
   git pull 将远程变动抓下来。
   或者在创建之后再clone 然后使用命令 
   $ git checkout -b ganhuo02 origin/ganhuo02 进行本地分支创建
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   首先，可以试图用git push origin branch-name推送自己的修改；
   如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
   如果合并有冲突，则解决冲突，并在本地提交；
   没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
   如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
   这就是多人协作的工作模式，一旦熟悉了，就非常简单。

  1.查看远程库信息，使用git remote -v；
  2.本地新建的分支如果不推送到远程，对其他人就是不可见的；
  3.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  4.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  5.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  6.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
  
  删除远程github 分支  $ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】
  推送空分支，相当于删除
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
29  $ git branch
    $ git checkout master
    $ git tag v1.0  //默认标签是打在最新提交的commit上的
    $ git tag 可以用命令git tag查看所有标签
    $ git log --pretty=oneline --abbrev-commit//找到历史提交的commit id，然后打上就可以了：
    $ git tag v0.9 6224937
    $ git tag//再用命令git tag查看标签：

    注意，标签不是按时间顺序列出，而是按字母排序的。
    可以用git show <tagname>查看标签信息：
    $ git show v0.9
    $ git tag -a v0.1 -m "备注信息" 3628164
    $ git show v0.1 //用命令git show <tagname>可以看到PGP签名信息：
    
    还可以通过-s用私钥签名一个标签：
    $ git tag -s v0.2 -m "signed version 0.2 released" fec145a
    签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，
    或者没有gpg密钥对，就会报错：

    gpg: signing failed: secret key not available
    error: gpg failed to sign the data
    error: unable to sign the tag
    如果报错，请参考GnuPG帮助文档配置Key。
   
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
    命令git tag可以查看所有标签。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
30 操作标签
   $ git tag -d v0.1 删除本地标签
   $ git push origin v1.0 推送本地标签到远程
   $ git push origin --tags 一次性推送全部尚未推送到远程的本地标签
   
   删除远程标签
   $ git tag -d v0.9    //先删除本地标签
   $git push origin :refs/tags/v0.01 删除远程v0.01标签
   要看看是否真的从远程库删除了标签，可以登陆GitHub查看。
   
   命令git push origin <tagname>可以推送一个本地标签；
   命令git push origin --tags可以推送全部未推送过的本地标签；
   命令git tag -d <tagname>可以删除一个本地标签；
   命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
   
   只要是推送空的东西，就代表把这个东西删除
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

下文为，附属操作了

40 使用GitHub 社区上的项目，参与到开源项目
   比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，
   你可以访问它的项目主页https://github.com/twbs/bootstrap，
   点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
   
   如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。
   如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。
   当然，对方是否接受你的pull request就不一定了。
   
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-   
41 使用码云
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000
使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。
如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务――码云（gitee.com）。
和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。
码云的免费版本也提供私有库功能，只是有5人的成员上限。
使用码云和使用GitHub类似，我们在码云上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -> 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的.ssh/id_rsa.pub文件的内容粘贴进去：
点击“确定”即可完成并看到刚才添加的Key：
如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到码云的远程库上呢？

首先，我们在码云上创建一个新的项目，选择右上角用户头像 -> 菜单“控制面板”，然后点击“创建项目”：
项目名称最好与本地库保持一致：

然后，我们在本地库上使用命令git remote add把它和码云的远程库关联：

git remote add origin git@gitee.com:liaoxuefeng/learngit.git
之后，就可以正常地用git push和git pull推送了！

如果在使用命令git remote add时报错：

git remote add origin git@gitee.com:liaoxuefeng/learngit.git
fatal: remote origin already exists.
这说明本地库已经关联了一个名叫origin的远程库，此时，可以先用git remote -v查看远程库信息：

git remote -v
origin    git@github.com:michaelliao/learngit.git (fetch)
origin    git@github.com:michaelliao/learngit.git (push)
可以看到，本地库已经关联了origin的远程库，并且，该远程库指向GitHub。

我们可以删除已有的GitHub远程库：

git remote rm origin
再关联码云的远程库（注意路径中需要填写正确的用户名）：

git remote add origin git@gitee.com:liaoxuefeng/learngit.git
此时，我们再查看远程库信息：

git remote -v
origin    git@gitee.com:liaoxuefeng/learngit.git (fetch)
origin    git@gitee.com:liaoxuefeng/learngit.git (push)
现在可以看到，origin已经被关联到码云的远程库了。通过git push命令就可以把本地库推送到Gitee上。

有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联码云呢？

答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。

使用多个远程库时，我们要注意，git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。

仍然以learngit本地库为例，我们先删除已关联的名为origin的远程库：

git remote rm origin
然后，先关联GitHub的远程库：

git remote add github git@github.com:michaelliao/learngit.git
注意，远程库的名称叫github，不叫origin了。

接着，再关联码云的远程库：

git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
同样注意，远程库的名称叫gitee，不叫origin。

现在，我们用git remote -v查看远程库信息，可以看到两个远程库：

git remote -v
gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
github    git@github.com:michaelliao/learngit.git (fetch)
github    git@github.com:michaelliao/learngit.git (push)
如果要推送到GitHub，使用命令：

git push github master
如果要推送到码云，使用命令：

git push gitee master
这样一来，我们的本地库就可以同时与多个远程库互相同步：

┌─────────┐ ┌─────────┐
│ GitHub  │ │  Gitee  │
└─────────┘ └─────────┘
     ▲           ▲
     └─────┬─────┘
           │
    ┌─────────────┐
    │ Local Repo  │
    └─────────────┘
码云也同样提供了Pull request功能，可以让其他小伙伴参与到开源项目中来。你可以通过Fork我的仓库：https://gitee.com/liaoxuefeng/learngit，创建一个your-gitee-id.txt的文本文件，
写点自己学习Git的心得，然后推送一个pull request给我，这个仓库会在码云和GitHub做双向同步。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



42 忽略特殊文件 (把不需要上传的隐藏)
有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。

好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore

忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
举个例子：

假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有Desktop.ini文件，因此你需要忽略Windows自动生成的垃圾文件：

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini
然后，继续忽略Python编译产生的.pyc、.pyo、dist等文件或目录：

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build
加上你自己定义的文件，最终得到一个完整的.gitignore文件，内容如下：

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa
最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。

使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。

有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：

$ git add App.class
The following paths are ignored by one of your .gitignore files:
App.class
Use -f if you really want to add them.
如果你确实想添加该文件，可以用-f强制添加到Git：

$ git add -f App.class
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：

$ git check-ignore -v App.class
.gitignore:3:*.class    App.class
Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。

小结

忽略某些文件时，需要编写.gitignore；

.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



43 配置命令别名
有没有经常敲错命令？比如git status？status这个单词真心不好记。

如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。

我们只需要敲一行命令，告诉Git，以后st就表示status：

$ git config --global alias.st status
好了，现在敲git st看看效果。

当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：

$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
以后提交就可以简写成：

$ git ci -m "bala bala bala..."
--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：

$ git config --global alias.unstage 'reset HEAD'
当你敲入命令：

$ git unstage test.py
实际上Git执行的是：

$ git reset HEAD test.py
配置一个git last，让其显示最后一次提交信息：

$ git config --global alias.last 'log -1'
这样，用git last就能显示最近一次的提交：

$ git last
commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2
Merge: bd6ae48 291bea8
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Thu Aug 22 22:49:22 2013 +0800

    merge & fix hello.py
甚至还有人丧心病狂地把lg配置成了：

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
来看看git lg的效果：

git-lg

为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！

配置文件

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：

$ cat .git/config 
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = true
[remote "origin"]
    url = git@github.com:michaelliao/learngit.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[alias]
    last = log -1
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

$ cat .gitconfig
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status
[user]
    name = Your Name
    email = your@email.com
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。

小结

给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



44 搭建 git 服务器

在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。

GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。

搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：

$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥

如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限

有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

小结

搭建Git服务器非常简单，通常10分钟即可完成；

要方便管理公钥，用Gitosis；

要像SVN那样变态地控制权限，用Gitolite。
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
xuexilo 

